snippet get
	get '/${1}' do
	  ${0}
	end
snippet metatitle=
	@meta_title = "${0} - #{@meta_title}"
snippet model
	require 'populate_me/mongo'

	class ${1:Product} < PopulateMe::Mongo

	  field :${0}, required: true

	end

snippet model-unique
	require 'populate_me/mongo'

	class ${1:Details} < PopulateMe::Mongo

	  field :${0}

	end

	$1.is_unique

snippet relationship
	relationship :${1:images}
	def $1
	  @cached_$1 ||= ${2:Image}.admin_find query: {'${2:current_class}_id'=>self.id}
	end
	${0}
snippet attachment
	field :${1:image}, type: :attachment, variations: [
	  PopulateMe::Variation.new_image_magick_job(:populate_me_thumb, :jpg, "-flatten -resize '400x225^' -gravity center -extent 400x225")
	]
	${0}
snippet variation
	PopulateMe::Variation.new_image_magick_job(:${1:populate_me_thumb}, :${2:jpg}, "-flatten -resize '${3:400x225}^' -gravity center -extent $3")
	${0}
snippet model-ch
	class ${1:Product}

		WITH_STASH = true
		include PopulateMe::Mongo::Plug
		include MongoBureau

		slot '${0}', required: true

	end

snippet model-unique-ch
	class ${1:Details}

		WITH_STASH = true
		include PopulateMe::Mongo::Plug
		include MongoBureau

		slot '${0}'

	end
	$1.is_unique

snippet mongodb
	require 'mongo'

	Mongo::Logger.logger.level = Logger::ERROR

	if ENV['MONGODB_URI']
		MONGO = Mongo::Client.new(ENV['MONGODB_URI'])
	elsif ENV['MONGODB_NAME']
		MONGO = Mongo::Client.new([ '127.0.0.1:27017' ], :database => ENV['MONGODB_NAME'])
	end
	DB = MONGO.database
	GRID = DB.fs if Kernel.const_defined?(:DB)

snippet reqdir
	Dir[File.join(File.expand_path(__dir__),'${1:models}','**','*.rb')].each do |f|
		require f
	end
snippet reqmodels
	Dir[File.join(File.expand_path(__dir__),'models','**','*.rb')].each do |f|
		require f
	end
snippet source
	source 'https://rubygems.org' do
	end
snippet unicorn
	worker_processes Integer(ENV["WEB_CONCURRENCY"] || 3)
	timeout 20
	preload_app true

	before_fork do |server, worker|
		Signal.trap 'TERM' do
			puts 'Unicorn master intercepting TERM and sending myself QUIT instead'
			Process.kill 'QUIT', Process.pid
		end
	end

	after_fork do |server, worker|
		Signal.trap 'TERM' do
			puts 'Unicorn worker intercepting TERM and doing nothing. Wait for master to send QUIT'
		end
	end

