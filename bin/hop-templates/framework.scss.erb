@use 'sass:math';

// Vars

$vendors: ('-webkit-','-moz-','-ms-','-o-','');
$vw-disabled: false;

// functions

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div( $number , ($number * 0 + 1) );
  }
  @return $number;
}

@function vw($size) {
  // Use this to get a value in vw based the design which has px values
  // for a specific viewport width stored in a css var called --ref-width.
  @if $vw-disabled {
    @return $size;
  } @else {
    @return calc( strip-unit( $size ) / var( --ref-width, 1280 ) * 100vw );
  }
}

// Mixins

@mixin vendor($key, $val...) {
  // Low level mixin for prepending a property with known vendor prefixes
  @each $vendor in $vendors {
    #{$vendor}#{$key}: $val; 
  }
}

@mixin portrait {
  @media screen and (orientation: portrait) {
    @content;
  }
}

@mixin landscape {
  @media screen and (orientation: landscape) {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }
  @include optional-at-root(':-moz-placeholder') {
    @content;
  }
  @include optional-at-root('::-moz-placeholder') {
    @content;
  }
  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::placeholder') {
    @content;
  }
}

@mixin retina {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    @content;
  }
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin fixed-proportions-wrap($width: 16, $height: 9) {
  // Legacy. Nowadays aspect-ratio is better.
  position: relative; 
  height: 0; overflow: hidden;
  padding-bottom: calc( $height / $width * 100%);
  & > * {
    position: absolute; left: 0; top: 0;
    width: 100%; height: 100%;
  }
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

// Extendable classes

%strip-margins-container {
  > *:first-child {
    margin-top: 0;
  }
  > *:last-child {
    margin-bottom: 0;
  }
}

// Debug spacing problems

%debug {
  * { background-color: rgba(255,0,0,.2); }
  * * { background-color: rgba(0,255,0,.2); }
  * * * { background-color: rgba(0,0,255,.2); }
  * * * * { background-color: rgba(255,0,255,.2); }
  * * * * * { background-color: rgba(0,255,255,.2); }
  * * * * * * { background-color: rgba(255,255,0,.2); }
  * * * * * * * { background-color: rgba(255,0,0,.2); }
  * * * * * * * * { background-color: rgba(0,255,0,.2); }
  * * * * * * * * * { background-color: rgba(0,0,255,.2); }
}

